// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email              String   @unique @db.Citext
  passwordHash       String
  displayName        String
  externalCustomerId String? // สำหรับ billing ภายหลัง
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  accounts     AccountProvider[]
  roles        UserRole[]
  sessions     Session[]
  entitlements UserEntitlement[]
  auditLogs    AuditLog[]
}

model AccountProvider {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @db.Uuid
  provider   String // 'google'
  providerId String // sub
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerId])
}

model Role {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code      String     @unique // 'admin','user'
  createdAt DateTime   @default(now())
  users     UserRole[]
}

model UserRole {
  userId String @db.Uuid
  roleId String @db.Uuid

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@index([roleId])
}

model Session {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String    @db.Uuid
  userAgent  String?
  ip         String?
  deviceId   String? // header: x-device-id
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime  @default(now())
  revokedAt  DateTime?

  user     User           @relation(fields: [userId], references: [id])
  tokens   RefreshToken[]
  AuditLog AuditLog[]

  @@index([userId])
  @@index([revokedAt])
}

model RefreshToken {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // jti
  sessionId       String    @db.Uuid
  createdAt       DateTime  @default(now())
  expiresAt       DateTime
  rotatedAt       DateTime?
  revokedAt       DateTime?
  replacedById    String?   @db.Uuid
  reuseDetectedAt DateTime?

  session Session @relation(fields: [sessionId], references: [id])

  @@index([sessionId])
  @@index([expiresAt])
}

model AuditLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?  @db.Uuid
  sessionId String?  @db.Uuid
  action    String // REGISTER, LOGIN, LOGOUT, REFRESH, REFRESH_REUSE, REVOKE_SESSION
  ip        String?
  userAgent String?
  meta      Json?
  createdAt DateTime @default(now())

  user    User?    @relation(fields: [userId], references: [id])
  session Session? @relation(fields: [sessionId], references: [id])

  @@index([userId])
  @@index([sessionId])
}

model Plan {
  id        String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code      String            @unique
  createdAt DateTime          @default(now())
  users     UserEntitlement[]
}

model UserEntitlement {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String    @db.Uuid
  planId    String    @db.Uuid
  startedAt DateTime  @default(now())
  endsAt    DateTime?
  active    Boolean   @default(true)

  user User @relation(fields: [userId], references: [id])
  plan Plan @relation(fields: [planId], references: [id])

  @@unique([userId, planId, active])
  @@index([planId])
}
